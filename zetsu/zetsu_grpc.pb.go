// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package zetsu

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ZetsuClient is the client API for Zetsu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZetsuClient interface {
	RegisterMonitor(ctx context.Context, in *MachineConnectInfo, opts ...grpc.CallOption) (*StatusResponse, error)
	GetLatestConfig(ctx context.Context, in *MachineBasicInfo, opts ...grpc.CallOption) (*ConfigResponse, error)
	UploadMonitorItem(ctx context.Context, in *MonitorInfo, opts ...grpc.CallOption) (*StatusResponse, error)
}

type zetsuClient struct {
	cc grpc.ClientConnInterface
}

func NewZetsuClient(cc grpc.ClientConnInterface) ZetsuClient {
	return &zetsuClient{cc}
}

func (c *zetsuClient) RegisterMonitor(ctx context.Context, in *MachineConnectInfo, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/zetsu.Zetsu/RegisterMonitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zetsuClient) GetLatestConfig(ctx context.Context, in *MachineBasicInfo, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/zetsu.Zetsu/GetLatestConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zetsuClient) UploadMonitorItem(ctx context.Context, in *MonitorInfo, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/zetsu.Zetsu/UploadMonitorItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZetsuServer is the server API for Zetsu service.
// All implementations must embed UnimplementedZetsuServer
// for forward compatibility
type ZetsuServer interface {
	RegisterMonitor(context.Context, *MachineConnectInfo) (*StatusResponse, error)
	GetLatestConfig(context.Context, *MachineBasicInfo) (*ConfigResponse, error)
	UploadMonitorItem(context.Context, *MonitorInfo) (*StatusResponse, error)
	mustEmbedUnimplementedZetsuServer()
}

// UnimplementedZetsuServer must be embedded to have forward compatible implementations.
type UnimplementedZetsuServer struct {
}

func (*UnimplementedZetsuServer) RegisterMonitor(context.Context, *MachineConnectInfo) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMonitor not implemented")
}
func (*UnimplementedZetsuServer) GetLatestConfig(context.Context, *MachineBasicInfo) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestConfig not implemented")
}
func (*UnimplementedZetsuServer) UploadMonitorItem(context.Context, *MonitorInfo) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadMonitorItem not implemented")
}
func (*UnimplementedZetsuServer) mustEmbedUnimplementedZetsuServer() {}

func RegisterZetsuServer(s *grpc.Server, srv ZetsuServer) {
	s.RegisterService(&_Zetsu_serviceDesc, srv)
}

func _Zetsu_RegisterMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineConnectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetsuServer).RegisterMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetsu.Zetsu/RegisterMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetsuServer).RegisterMonitor(ctx, req.(*MachineConnectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zetsu_GetLatestConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineBasicInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetsuServer).GetLatestConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetsu.Zetsu/GetLatestConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetsuServer).GetLatestConfig(ctx, req.(*MachineBasicInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zetsu_UploadMonitorItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitorInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZetsuServer).UploadMonitorItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetsu.Zetsu/UploadMonitorItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZetsuServer).UploadMonitorItem(ctx, req.(*MonitorInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Zetsu_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zetsu.Zetsu",
	HandlerType: (*ZetsuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterMonitor",
			Handler:    _Zetsu_RegisterMonitor_Handler,
		},
		{
			MethodName: "GetLatestConfig",
			Handler:    _Zetsu_GetLatestConfig_Handler,
		},
		{
			MethodName: "UploadMonitorItem",
			Handler:    _Zetsu_UploadMonitorItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zetsu/zetsu.proto",
}
